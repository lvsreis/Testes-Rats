// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, version 2.4.0,
// (C) 2004-2014 Robert Grimm,
// on Sexta-feira, 6 de Novembro de 2020 at 13:57:17.
// Edit at your own risk.
// ===========================================================================

import java.io.Reader;
import java.io.IOException;

import xtc.util.Pair;

import xtc.parser.ParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

/**
 * Packrat parser for grammar <code>func</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 2.4.0, (C) 2004-2014 Robert Grimm.
 */
public final class func extends ParserBase {

  // =========================================================================

  /** Memoization table column. */
  static final class funcColumn extends Column {
    Result fW;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public func(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public func(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new funcColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal func.prog.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pprog(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    int        yyRepetition1;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    while (true) {

      yyC = character(yyRepetition1);
      if (-1 != yyC) {
        yyIndex = yyRepetition1 + 1;
        if (('a' <= yyC) && (yyC <= 'z')) {

          yyRepetition1 = yyIndex;
          continue;
        }
      }
      break;
    }

    yyResult = pW(yyRepetition1);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyRepetition1 = yyResult.index;
      while (true) {

        yyC = character(yyRepetition1);
        if (-1 != yyC) {
          yyIndex = yyRepetition1 + 1;
          if (('a' <= yyC) && (yyC <= 'z')) {

            yyRepetition1 = yyIndex;
            continue;
          }
        }
        break;
      }

      yyResult = pW(yyRepetition1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {

        yyBase = yyResult.index;
        yyC    = character(yyBase);
        if ('{' == yyC) {
          yyIndex = yyResult.index + 1;

          yyResult = pW(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyRepetition1 = yyResult.index;
            while (true) {

              yyC = character(yyRepetition1);
              if (-1 != yyC) {
                yyIndex = yyRepetition1 + 1;
                if (('a' <= yyC) && (yyC <= 'z')) {

                  yyRepetition1 = yyIndex;
                  continue;
                }
              }
              break;
            }

            yyC = character(yyRepetition1);
            if (';' == yyC) {
              yyIndex = yyRepetition1 + 1;

              yyResult = pW(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {

                yyRepetition1 = yyResult.index;
                while (true) {

                  yyC = character(yyRepetition1);
                  if (-1 != yyC) {
                    yyIndex = yyRepetition1 + 1;
                    if (('a' <= yyC) && (yyC <= 'z')) {

                      yyRepetition1 = yyIndex;
                      continue;
                    }
                  }
                  break;
                }

                yyBase = yyRepetition1;
                yyC    = character(yyBase);
                if (';' == yyC) {
                  yyIndex = yyRepetition1 + 1;

                  yyResult = pW(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {

                    yyBase = yyResult.index;
                    yyC    = character(yyBase);
                    if ('}' == yyC) {
                      yyIndex = yyResult.index + 1;

                      yyValue = null;

                      return new SemanticValue(yyValue, yyIndex, yyError);
                    } else {
                      yyError = yyError.select("'}' expected", yyBase);
                    }
                  }
                } else {
                  yyError = yyError.select("';' expected", yyBase);
                }
              }
            }
          }
        } else {
          yyError = yyError.select("'{' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("prog expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal func.W.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pW(final int yyStart) throws IOException {
    funcColumn yyColumn = (funcColumn)column(yyStart);
    if (null == yyColumn.fW) yyColumn.fW = pW$1(yyStart);
    return yyColumn.fW;
  }

  /** Actually parse func.W. */
  private Result pW$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case ' ':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyResult = pW(yyChoice1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\r':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyResult = pW(yyChoice1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\n':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyResult = pW(yyChoice1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      case '\t':
        {
          final int yyChoice1 = yyIndex;

          // Nested alternative 1.

          yyResult = pW(yyChoice1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {

            yyValue = null;

            return yyResult.createValue(yyValue, yyError);
          }

          // Nested alternative 2.

          yyValue = null;

          return new SemanticValue(yyValue, yyChoice1, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("W expected", yyStart);
    return yyError;
  }

}
